------------------------------------------------------
--------------Comandos de CMD-------------------------
------------------------------------------------------
dir
-> Lista os arquivos da pasta

cls 
-> Limpa o prompt o conteúdo o prompt de comando

npx cypress open
-> Abre a ferramenta do cypress

npx cypress run
-> Executa os testes do cypress no modo headlass (Nós não conseguimos ver a execução do testes, mas ele gera prints e vídeo do que aconteceu)


------------------------------------------------------
-----------Comandos Visual Studio Code----------------
-------------------------------------------------------
shift + alt + f
-> Identar o código 

ctrl + ;
-> Comentar o código

 ------------------------------------------------------
---------------------Anotações-------------------------
-------------------------------------------------------


// <reference types="Cypress" /> 
-> Ao adicionar o texto acima no código do cypress, ele habilita o intelicense do Cypress
-> Ele exibe orientações de como usar as funções do cypress

beforeEach
-> Serve para executar ações antes de cada suite de teste.
-> 

cy.visit('https://site.com')
-> Ele recebe como parâmetro o link do site que será testado
-> Ele recebe como parâmetro o caminho da pasta do arquivo que será testado
-> Normalmente adicionamos ele dentro do beforeEach(), pois, assim a cada teste ele entra em um endereço
especifico 


Describe('Nome da suite de teste', funciotion(){
    //Aqui adicionamos os testes
})
-> Estrutura do describe é equivalente a uma suite de Testes.
-> Como primeiro parâmetro ele recebe o nome da suite de testes
-> Como segundo argumento ele recebe uma função de callback
-> O que é uma função de callback? (É uma função que recebe como argumento uma outra função)
-> Todos os testes ficam dentro dele

it('nome do teste', function() {
    //Aqui adicionamos o script do teste
})
-> Cada "it" é um teste diferente
-> Ao adicionar ".only" ele executa apenas esse teste
-> Assim como o describe, ele recebe como argumento o nome do teste e uma função de callback

cy. 
Mostra os comandos do cypress

cy.get() 
-> Identifica um elemento html na tela
-> A busca tem que ser através do CSS Selector
-> Conseguimos encadear outros comando através dele

CSS Selector
-> #nomeId "#" + o nome do id faz com o cypress busque pelo elemento sem a necessidade de colocar o atributo
-> .nomeClass "." o nome da class que você busca .error, .sucess, .button
-> '[id="firstName"]' entre aspas simples adicinamos o atributo que pode ser id, class e name + nome dele
-> 'button[type="submit"]' entre aspas simples adicionamos a tag e algum atributo que possa deixa-lo exclusivo
-> 'input[type="radio"][value="feedback"]' podemos adicionar mais de um atributo
-> '#privacy a' adicionamos o id + tag


.should()
-> "Deve" é usado para fazer uma validação do teste (Assert)
-> Primeiro adicionamos a validação, depois o valor
-> .should('be.qual', 'valor') Verifica se o valor coletado seja igual ao valor passado como argumento
-> .should('have.text', 'texto') Verifique se tem o texto
-> .should('be.visible') Verifica se o elemento está visivél 
-> .should('have.value', 'valor') Verifica se campo possui um determinado valor


-> Exemplo: cy.get('.success').should('be.visible')
            cy.get('.success').should('not.be.visible')


.type('Texto genérico')
-> Digita as informações no campo
-> O daley padão e de 10 segundos. 
-> O daley pode ser auterado adicionando um atributo de daley
-> Exemplo: cy.get('[id="idDoCampo"]').type('Texto genérico')
            cy.get('[id="idDoCampo"]').type('Texto genérico', {delay:0})

.click()
-> Clica no elemento, pode ser um botão, radio-button, checkbox etc 
-> Exemplo: cy.contains('button', 'Enviar').click()

cy.contains()
-> Ele confere se há um determido elemento na página
-> Recebe como argumento a tag e o value dessa tag
-> Exemplo: cy.contains('button', 'Enviar').click()

cy.title()
-> Ele o título da página

cy.clock()
-> Pausa o relogio do navegador 
-> Podemos definir uma data, intervalo de tempo
-> Recebe como argumento data

cy.tick()
-> Podemos avançar no tempo ao invés de esperar uma ação acontecer por completo
-> Recebe como argumento variaveis e 



cy.

/// <reference types="Cypress" />
-> Adicionamos isso no início do arquivo para ativar o intelisense, ele serve para mostrar as dicas do cypress;

descrebe('Nome da suite de testes', function (){
    //Aqui dentro colocamos os testes         
})
-> Aqui é a estrutura da suite de testes dentro do Cypress;
-> Ela irá receber um nome entre parenteses simples e function() {};
-> Essa function nós chamamos de função de callback;
-> A função de callback é uma uma função passada dentro de outra função como argumento;


beforeEach(function () {
    cy.visit('')
})
-> beforeEach() recebe um função de callback;
-> beforeEach traduzindo "Antes de Cada", então ele executa tudo que está dentro dele antes de cada testes;
-> cy.visit('') ele pode receber URL ou a localização da pasta entre aspas simples;
-> cy.visit('') ele serve para visitar um site;


it('Nome do teste', function () {
    cy.title().should('be.equal', 'Texto no qual vc quer comparar')
})
-> it() traduzindo recebe um nome e uma função de callback;
-> it() traduzindo "Isto", cada "it" representa um teste e tudo que está dentro dele deverá ser executado;
-> it.only() quando adicionamos o "only" após o "it" apenas esse teste será executado, 
isso serve para não ter que ficar rodando todos os testes quando estamos validando o novo 
teste validado. 
cy.title() ele pega o título da página (É o nome que aparece na aba);
.should tradução para "deve", fará uma validação, esse pode variar de acordo com que digitamos;
.should('be.equal', 'Texto no qual vc quer comparar') o texto coletado deve ser igual ao texto digitado entre aspas simples;


it('preenche os campos obrigatórios e envia o formulário', function () {
        const longText = 't is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using Content here, content here, making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for lorem ipsum will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose injected humour and the like.';

        cy.get('[id="firstName"]').type("Weslley")
        cy.get('[id="lastName"]').type("Santos")
        cy.get('[id="email"]').type("weslleycarvalho344@gmail.com")
        cy.get('[id="open-text-area"]').type(longText, { delay: 0 })
        cy.contains('button', 'Enviar').click()

        cy.get('.success').should('be.visible')
 })
-> const longText criamos esse constante para receber o texto que iriamos usar para preencher o campo de área.
-> cy.get() ele é o comando mais usado do cypress;
-> cy.get() ele serve para identificar o elemento web. 
-> cy.get() usamos o CSS Selector para identificar os elementos;
-> cy.get() dentro do "get()" entre aspas simples usamos o "#" + nome do id do elemento. 
Exemplo: #nome, #email, #senha;
-> cy.get() dentro do "get()" entre aspas simples usamos o "." + nome da classe do elemento. 
Exemplo: class="nome", class="email", class="senha";
-> cy.get() dentro do "get()" entre aspas simples usamos a seguinte estrutura: 
'[id="firstName"]', '[class="firstName"]', '[nome="firstName"]'.




    it('marca cada tipo de atendimento', function () {
        cy.get('input[type="radio"]')
            .should('have.length', 3).each(function ($radio) {
                cy.wrap($radio).check()
                cy.wrap($radio).should('be.checked')
            })
        // No cypress podemos pegar todos os valores dentro de campo. 
        // should é usado para conferir se o tamanho da lista é o mesmo que a listada
        // each faz uma iteração ele é equivalente ao "for" do Java. 
        // O "each" deve receber como argumento a função de callback
        // A função de callback deve receber um argumento 
        // .wrap empata o valor para podermos manipula-los
    })

        it('seleciona um arquivo da pasta fixtures', function () {
        cy.get('input[type="file"]#file-upload')
            .should('not.have.value')
            .selectFile('./cypress/fixtures/example.json')
            .should(function (input) {
                console.log(input)
                expect(input[0].files[0].name).to.equal('example.json')
            })
        //Existem outras técnicas de seletor de css para deixar a seleção do elemento mais precisa
        //should pode receber uma função de callback
        //Podemos o console.log paa=ra conseguir saber o que o objeto devolve
        //Nesse caso nos conseguimos abrir um jquery para identificar o nome do arquivo
    })

        it('verifica que a política de privacidade abre em outra aba sem a necessidade de um clique', function () {
        cy.get('#privacy a')
            .should('have.attr', 'target', '_blank')
    })

    it('acessa a página da política de privacidade removendo o target e então clicando no link', function () {
        cy.get('#privacy a')
            .invoke('removeAttr', 'target')
            .click()

        cy.contains('Talking About Testing').should('be.visible')
        //Usamos o "involke" para poder remover a propriedade "target" que contém o valor _black, quando clicado abre o link em outra aba, removendo-o abrimos na mesma aba, e apartir disso continuar testando a outra tela 
    })


    // Desse jeito conseguimos passar o valor no teste dentro do arquivo executavel
// Cypress.Commands.add('fillMandatoryFieldsAndSubmit', function(nome, sobrenome, email, textArea) {
//     cy.get('#firstName').type(nome)
//     cy.get('#lastName').type(sobrenome)
//     cy.get('#email').type(email)
//     cy.get('#open-text-area').type(textArea)
//     cy.get('button[type="submit"]').click()
// })



// Passando um Objeto, mas devemos ter um objeto criado dentro do executável 
// const user = {} criamos um objeto

// beforeEach(function () {
//     cy.visit('./src/index.html')

//     user.nome = 'Sandro' passamos o valor do objeto
//     user.sobreNome ='Silva'
//     user.email = 'sandroS@gmail.com'
//     user.textArea = 'Texto generico'
// })

// Cypress.Commands.add('fillMandatoryFieldsAndSubmit', (user) => {
//     cy.get('#firstName').type(user.nome)
//     cy.get('#lastName').type(user.sobreNome)
//     cy.get('#email').type(user.email)
//     cy.get('#open-text-area').type(user.textArea)
//     cy.get('button[type="submit"]').click()
// })